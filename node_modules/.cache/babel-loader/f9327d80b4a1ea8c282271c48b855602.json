{"ast":null,"code":"var _jsxFileName = \"/Users/micahberman/Documents/momentum/buzzpath/src/components/map.js\",\n    _s = $RefreshSig$();\n\nimport { useLoadScript, GoogleMap, Autocomplete, DirectionsRenderer, Marker, directions, google, results, originRef, destinationRef, setDirectionsResponse, setDistance, setDuration, distance, duration, coffeeDistance, directionsResponse } from \"@react-google-maps/api\";\nimport React, { useState, useRef } from 'react';\nimport \"./maps.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = {\n  lat: 35.9940,\n  lng: -78.8986\n};\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100%\",\n  overflow: \"visible\",\n  resetBoundsOnResize: \"true\"\n};\nexport default function Gmap(_ref) {\n  _s();\n\n  let {\n    rangeValue\n  } = _ref;\n  const [map, setMap] = useState(null);\n  const [directionsResponse, setDirectionsResponse] = useState(null);\n  const [distance, setDistance] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n  const originRef = useRef();\n  const destinationRef = useRef();\n  const {\n    isLoaded,\n    loaderror\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  if (loaderror) return \"Where's my Coffee!! - be\";\n  if (!isLoaded) return \"Finding your coffee\";\n  const distCoffee = distance.slice(0, -2);\n  const intCoffee = Number(distCoffee);\n  console.log(rangeValue);\n  /* async function coffeeStops({rangeValue}) { */\n\n  const coffeeDistance = intCoffee / rangeValue;\n  /*   await calculatePath;\n    if (distance > 0) {\n      console.log(coffeeDistance)\n      return coffeeDistance;\n      console.log({distance}); */\n\n  /* Micah's Code */\n\n  const directions = {};\n  const stops = 2;\n  const route = setDirectionsResponse(results);\n  route.rendering.routeId = `thisRoute`; // Set the stops for the route to the first value (default)\n\n  route.rendering.stops = stops; // When this select element is changed, update the route renderer.stops to the new value\n\n  onload = function () {\n    // update the route renderer.stops to the new value\n    directions[this.name].renderer.stops = this.value; // Draw the new markers for the route that just had it's stops changed\n\n    setMarkers(this.name);\n  };\n\n  requestRoute(route, map);\n}\n\n_s(Gmap, \"FqN0uWkpgi9vCILvTx3USBdz/XM=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Gmap;\n; // Set markers for the route with ID\n\nconst setMarkers = ID => {\n  // Get info about the route\n  const direction = directions[ID],\n        renderer = direction.renderer,\n        stop = renderer.stops,\n        marker = renderer.marker,\n        map = renderer.getMap(),\n        dirs = direction.renderer.getDirections();\n  marker.map = map; // For each set, which is an object where key: number of stops and value: list of markers\n\n  for (const k in direction.sets) {\n    const set = directions[ID].sets[k]; // Only show the set of markers that match the currently selected number of stops\n\n    set.visible = !!(k === stop); // For each marker in the set\n\n    set.forEach(marker => {\n      // If this is the visible set, set the marker map to the map otherwise null\n      marker.setMap(set.visible ? map : null);\n    });\n  }\n\n  ; // If a set of markers has not been calculated for this number of stops yet\n\n  if (!direction.sets[stop]) {\n    if (dirs.routes.length) {\n      const route = dirs.routes[0];\n      let distanceBetweenStops = 0; // For each leg in the route\n\n      route.legs.forEach(leg => {\n        if (leg.distance) {\n          // Set the distance between stops to (total leg distance) / (number of stops + 1)\n          distanceBetweenStops = leg.distance.value / (parseInt(stop) + 1);\n        }\n      }); // Get the list of markers for this milestone\n\n      direction.sets[stop] = getMarkers(route, distanceBetweenStops, marker);\n    }\n  }\n}; // Remove old markers and render updated map with markers\n\n\nconst requestRoute = (route, map) => {\n  if (!window.gDirSVC) window.gDirSVC = new google.maps.DirectionsService();\n  var renderer = new google.maps.DirectionsRenderer(route.rendering);\n  var renderer = new google.maps.DirectionsRenderer(route.rendering);\n  renderer.setMap(map);\n  renderer.setOptions({\n    preserveViewport: true\n  });\n  google.maps.event.addListener(renderer, 'directions_changed', function () {\n    if (directions[this.routeId]) {\n      //remove markers\n      for (var k in directions[this.routeId].sets) {\n        for (var m = 0; m < directions[this.routeId].sets[k].length; ++m) {\n          directions[this.routeId].sets[k][m].setMap(null);\n        }\n      }\n    }\n\n    directions[this.routeId] = {\n      renderer: this,\n      sets: {}\n    };\n    setMarkers(this.routeId);\n  });\n  window.gDirSVC.route(route.request, function (response, status) {\n    if (status == google.maps.DirectionsStatus.OK) {\n      renderer.setDirections(response);\n    }\n  });\n  /*Micah's Code*/\n\n  async function calculatePath() {\n    if (originRef.current.value === '' || destinationRef.current.value === '') {\n      return;\n    } // eslint-disable-next-line no-undef\n\n\n    const directionsService = new google.maps.DirectionsService();\n    const results = await directionsService.route({\n      origin: originRef.current.value,\n      destination: destinationRef.current.value,\n      // eslint-disable-next-line no-undef\n      travelMode: google.maps.TravelMode.DRIVING\n    });\n    setDirectionsResponse(results);\n    setDistance(results.routes[0].legs[0].distance.text);\n    setDuration(results.routes[0].legs[0].duration.text);\n    /* console.log(coffeeDistance) */\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Origin\",\n          ref: originRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Destination\",\n          ref: destinationRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: calculatePath,\n        children: \"Find your Buzzed Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Distance: \", distance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration: \", duration]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Miles per Coffee: \", coffeeDistance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coffeemap\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: 8,\n        center: center,\n        children: [/*#__PURE__*/_jsxDEV(Marker, {\n          position: center\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 8\n        }, this), directionsResponse && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n          directions: directionsResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 3\n  }, this);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Gmap\");","map":{"version":3,"sources":["/Users/micahberman/Documents/momentum/buzzpath/src/components/map.js"],"names":["useLoadScript","GoogleMap","Autocomplete","DirectionsRenderer","Marker","directions","google","results","originRef","destinationRef","setDirectionsResponse","setDistance","setDuration","distance","duration","coffeeDistance","directionsResponse","React","useState","useRef","center","lat","lng","libraries","mapContainerStyle","width","height","overflow","resetBoundsOnResize","Gmap","rangeValue","map","setMap","isLoaded","loaderror","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","distCoffee","slice","intCoffee","Number","console","log","stops","route","rendering","routeId","onload","name","renderer","value","setMarkers","requestRoute","ID","direction","stop","marker","getMap","dirs","getDirections","k","sets","set","visible","forEach","routes","length","distanceBetweenStops","legs","leg","parseInt","getMarkers","window","gDirSVC","maps","DirectionsService","setOptions","preserveViewport","event","addListener","m","request","response","status","DirectionsStatus","OK","setDirections","calculatePath","current","directionsService","origin","destination","travelMode","TravelMode","DRIVING","text"],"mappings":"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","sourcesContent":["import {\n  useLoadScript,\n  GoogleMap,\n  Autocomplete,\n  DirectionsRenderer,\n  Marker,\n  directions,\n  google,\n  results,\n  originRef,\n  destinationRef,\n  setDirectionsResponse,\n  setDistance,\n  setDuration,\n  distance,\n  duration,\n  coffeeDistance,\n  directionsResponse,\n} from \"@react-google-maps/api\";\nimport React, { useState, useRef } from 'react'\nimport \"./maps.css\"\n\n \n\n\n\nconst center = {lat: 35.9940,lng: -78.8986}\nconst libraries = [\"places\"]\nconst mapContainerStyle = {\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"visible\",\n    resetBoundsOnResize: \"true\",\n}\n\n\nexport default function Gmap ({rangeValue}) {\n    \n                const [map, setMap] = useState(null);\n                const [directionsResponse, setDirectionsResponse] =\n                  useState(null);\n                const [distance, setDistance] = useState(\"\");\n                const [duration, setDuration] = useState(\"\");\n                \n                \n                const originRef = useRef();\n                const destinationRef = useRef();\n    const { isLoaded, loaderror } = useLoadScript({\n          googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n          libraries,\n        });\n    if (loaderror) return \"Where's my Coffee!! - be\";\n    if(!isLoaded) return \"Finding your coffee\";\n\n\n    const distCoffee = (distance.slice(0,-2))\n    const intCoffee = Number(distCoffee)\n       console.log(rangeValue)     \n\n   \n   \n /* async function coffeeStops({rangeValue}) { */\n           const coffeeDistance = intCoffee /(rangeValue); \n\n        /*   await calculatePath;\n          if (distance > 0) {\n            console.log(coffeeDistance)\n            return coffeeDistance;\n            console.log({distance}); */\n\n\n/* Micah's Code */\n      const directions = {};     \n      const stops = 2;\n      const route = setDirectionsResponse(results)  \n\n      route.rendering.routeId = `thisRoute`;\n      // Set the stops for the route to the first value (default)\n      route.rendering.stops = stops;\n      // When this select element is changed, update the route renderer.stops to the new value\n      onload = function() {\n        // update the route renderer.stops to the new value\n        directions[this.name].renderer.stops = this.value;\n        // Draw the new markers for the route that just had it's stops changed\n        setMarkers(this.name)\n      };         \n      requestRoute(route,map);\n    };\n  \n  \n  // Set markers for the route with ID\n  const setMarkers = (ID) => {\n    // Get info about the route\n    const direction = directions[ID],\n        renderer = direction.renderer,\n        stop = renderer.stops,\n        marker = renderer.marker,\n        map = renderer.getMap(),\n        dirs = direction.renderer.getDirections();\n        marker.map = map;\n\n    // For each set, which is an object where key: number of stops and value: list of markers\n    for (const k in direction.sets) {\n      const set = directions[ID].sets[k];\n      // Only show the set of markers that match the currently selected number of stops\n      set.visible = !!(k === stop);\n      \n      // For each marker in the set\n      set.forEach(marker => {\n        // If this is the visible set, set the marker map to the map otherwise null\n        marker.setMap(set.visible ? map : null);\n      });\n    };\n\n    // If a set of markers has not been calculated for this number of stops yet\n    if(!direction.sets[stop]) {\n      if(dirs.routes.length) {\n        const route = dirs.routes[0];\n        let distanceBetweenStops = 0;\n\n        // For each leg in the route\n        route.legs.forEach(leg => {\n          if(leg.distance) {\n            // Set the distance between stops to (total leg distance) / (number of stops + 1)\n            distanceBetweenStops = leg.distance.value / (parseInt(stop) + 1);\n          }\n          \n        });\n        \n        // Get the list of markers for this milestone\n        direction.sets[stop]= getMarkers(route, distanceBetweenStops, marker);\n      }\n    }\n  }\n  \n  // Remove old markers and render updated map with markers\n   const requestRoute = (route,map) => {\n    if(!window.gDirSVC) window.gDirSVC = new google.maps.DirectionsService();\n        \n    var renderer=new google.maps.DirectionsRenderer(route.rendering);\n     var renderer=new google.maps.DirectionsRenderer(route.rendering);\n        renderer.setMap(map);\n        renderer.setOptions({preserveViewport:true})\n        \n    \n    google.maps.event.addListener(renderer, 'directions_changed', function() {\n          \n          if(directions[this.routeId])\n          {\n           //remove markers\n            for(var k in directions[this.routeId].sets)\n            {              \n                for(var m=0;m<directions[this.routeId].sets[k].length;++m)\n                {\n                  directions[this.routeId].sets[k][m].setMap(null);\n                }\n            }\n          }\n\n          directions[this.routeId]={renderer:this,sets:{}};\n          setMarkers(this.routeId);\n          \n    });\n\n     window.gDirSVC.route(route.request, function(response, status) {\n      if (status == google.maps.DirectionsStatus.OK) {\n        renderer.setDirections(response);\n    }\n    });\n   \n \n      \n/*Micah's Code*/ \n          \n    async function calculatePath(){\n       \n        if (originRef.current.value === '' || destinationRef.current.value === ''){\n            return\n        }\n        \n        // eslint-disable-next-line no-undef\n        const directionsService = new google.maps.DirectionsService()\n        const results = await directionsService.route({\n          origin: originRef.current.value,\n          destination: destinationRef.current.value,\n          // eslint-disable-next-line no-undef\n          travelMode: google.maps.TravelMode.DRIVING,\n        \n        });\n            \n        setDirectionsResponse(results)\n        setDistance(results.routes[0].legs[0].distance.text)\n        setDuration(results.routes[0].legs[0].duration.text)\n        \n        /* console.log(coffeeDistance) */\n        \n        \n\n    }\n\n\n\nreturn (\n  <div>\n    <div>\n      <Autocomplete>\n        <input type=\"text\" placeholder=\"Origin\" ref={originRef} />\n      </Autocomplete>\n    </div>\n    <div>\n      <Autocomplete>\n        <input type=\"text\" placeholder=\"Destination\" ref={destinationRef} />\n      </Autocomplete>\n    </div>\n    \n    <div>\n        <button type='submit' onClick={calculatePath}>Find your Buzzed Path</button>\n    </div>\n    <div>\n        <p>Distance: {distance}</p>\n        \n        <p>Duration: {duration}</p>\n        <p>Miles per Coffee: {coffeeDistance}</p>\n{/*         <p>Miles per Coffee: {intCoffee/rangeValue}</p>\n */}        \n    </div>\n    <div className=\"coffeemap\">\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={8}\n        center={center}\n      ><Marker position={center}/>\n        {directionsResponse && (\n            <DirectionsRenderer directions = {directionsResponse}/>\n        )}</GoogleMap>\n    </div>\n  </div>\n);\n}\n"]},"metadata":{},"sourceType":"module"}