{"ast":null,"code":"var _jsxFileName = \"/Users/micahberman/Documents/momentum/buzzpath/src/components/map.js\",\n    _s = $RefreshSig$();\n\n/* global google */\nimport { useLoadScript, GoogleMap, Autocomplete, DirectionsRenderer, Marker } from \"@react-google-maps/api\";\nimport React, { useState, useRef } from 'react';\nimport \"./maps.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst center = {\n  lat: 35.9940,\n  lng: -78.8986\n};\nconst libraries = [\"places\"];\nconst mapContainerStyle = {\n  width: \"100%\",\n  height: \"100%\",\n  overflow: \"visible\",\n  resetBoundsOnResize: \"true\"\n};\nexport default function Gmap(_ref) {\n  _s();\n\n  let {\n    rangeValue\n  } = _ref;\n  const [map, setMap] = useState(null);\n  const [directionsResponse, setDirectionsResponse] = useState(null);\n  const [distance, setDistance] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n  const originRef = useRef();\n  const destinationRef = useRef();\n  const {\n    isLoaded,\n    loaderror\n  } = useLoadScript({\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    libraries\n  });\n  if (loaderror) return \"Where's my Coffee!! - be\";\n  if (!isLoaded) return \"Finding your coffee\";\n  const distCoffee = distance.slice(0, -2);\n  const intCoffee = Number(distCoffee);\n  /* Micah's Code    \n        async function findLegsLength(){\n        console.log(rangeValue)     \n        console.log(directionsResponse.routes[0].legs[0].distance.value);\n  \n        const tripDistance = directionsResponse.routes[0].legs[0].distance.value\n        const stops = 2\n  \n        const newLegLength = tripDistance/stops\n        console.log(newLegLength)\n        }\n  \n        findLegsLength()\n  \n  End Micah's Code */\n\n  /* Other BS Code */\n\n  async function getMarkers(route, distanceBetweenStops, markerOptions) {\n    let markers = [],\n        geo = google.maps.geometry.spherical,\n        path = route.overview_path,\n        point = path[0],\n        distance = 0,\n        leg,\n        overflow,\n        markerPosition; // For each point on the path\n\n    path.forEach(pointOnPath => {\n      // Set the distance of the leg to (previous point distances) + (distance from last point to current point)\n      leg = Math.round(geo.computeDistanceBetween(point, pointOnPath));\n      let d1 = distance + 0;\n      distance += leg;\n      overflow = distanceBetweenStops - d1 % distanceBetweenStops; // Once the leg is >= to the desired distance between points, create the new marker and push it to markers\n\n      if (distance >= distanceBetweenStops && leg >= overflow) {\n        markerPosition = geo.computeOffset(point, overflow, geo.computeHeading(point, pointOnPath));\n        markerOptions.position = markerPosition;\n        markers.push(new google.maps.Marker(markerOptions));\n        distance -= distanceBetweenStops;\n      }\n\n      point = pointOnPath;\n    });\n    markers.forEach(marker => console.log(marker.position.lat(), marker.position.lng()));\n    return markers;\n  }\n  /* End Other BS Code */\n\n  /* async function coffeeStops({rangeValue}) { */\n\n\n  const coffeeDistance = intCoffee / rangeValue;\n  /*   await calculatePath;\n    if (distance > 0) {\n      console.log(coffeeDistance)\n      return coffeeDistance;\n      console.log({distance}); */\n\n  async function calculatePath() {\n    if (originRef.current.value === '' || destinationRef.current.value === '') {\n      return;\n    } // eslint-disable-next-line no-undef\n\n\n    const directionsService = new google.maps.DirectionsService();\n    const results = await directionsService.route({\n      origin: originRef.current.value,\n      destination: destinationRef.current.value,\n      // eslint-disable-next-line no-undef\n      travelMode: google.maps.TravelMode.DRIVING\n    });\n    setDirectionsResponse(results);\n    setDistance(results.routes[0].legs[0].distance.text);\n    setDuration(results.routes[0].legs[0].duration.text);\n    /* console.log(coffeeDistance) */\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Origin\",\n          ref: originRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Destination\",\n          ref: destinationRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: calculatePath,\n        children: \"Find your Buzzed Path\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Distance: \", distance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration: \", duration]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Miles per Coffee: \", coffeeDistance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"coffeemap\",\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: mapContainerStyle,\n        zoom: 8,\n        center: center,\n        children: [/*#__PURE__*/_jsxDEV(Marker, {\n          position: center\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 8\n        }, this), directionsResponse && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n          directions: directionsResponse\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Gmap, \"FqN0uWkpgi9vCILvTx3USBdz/XM=\", false, function () {\n  return [useLoadScript];\n});\n\n_c = Gmap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gmap\");","map":{"version":3,"sources":["/Users/micahberman/Documents/momentum/buzzpath/src/components/map.js"],"names":["useLoadScript","GoogleMap","Autocomplete","DirectionsRenderer","Marker","React","useState","useRef","center","lat","lng","libraries","mapContainerStyle","width","height","overflow","resetBoundsOnResize","Gmap","rangeValue","map","setMap","directionsResponse","setDirectionsResponse","distance","setDistance","duration","setDuration","originRef","destinationRef","isLoaded","loaderror","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","distCoffee","slice","intCoffee","Number","getMarkers","route","distanceBetweenStops","markerOptions","markers","geo","google","maps","geometry","spherical","path","overview_path","point","leg","markerPosition","forEach","pointOnPath","Math","round","computeDistanceBetween","d1","computeOffset","computeHeading","position","push","marker","console","log","coffeeDistance","calculatePath","current","value","directionsService","DirectionsService","results","origin","destination","travelMode","TravelMode","DRIVING","routes","legs","text"],"mappings":"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","sourcesContent":["/* global google */\nimport {\n  useLoadScript,\n  GoogleMap,\n  Autocomplete,\n  DirectionsRenderer,\n  Marker,\n } from \"@react-google-maps/api\";\nimport React, { useState, useRef } from 'react'\nimport \"./maps.css\"\n\n \n\n\n\nconst center = {lat: 35.9940,lng: -78.8986}\nconst libraries = [\"places\"]\nconst mapContainerStyle = {\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"visible\",\n    resetBoundsOnResize: \"true\",\n}\n\n\nexport default function Gmap ({rangeValue}) {\n    \n                const [map, setMap] = useState(null);\n                const [directionsResponse, setDirectionsResponse] =\n                  useState(null);\n                const [distance, setDistance] = useState(\"\");\n                const [duration, setDuration] = useState(\"\");\n                \n                \n                const originRef = useRef();\n                const destinationRef = useRef();\n    const { isLoaded, loaderror } = useLoadScript({\n          googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n          libraries,\n        });\n    if (loaderror) return \"Where's my Coffee!! - be\";\n    if(!isLoaded) return \"Finding your coffee\";\n\n\n    const distCoffee = (distance.slice(0,-2))\n    const intCoffee = Number(distCoffee)\n/* Micah's Code    \n      async function findLegsLength(){\n      console.log(rangeValue)     \n      console.log(directionsResponse.routes[0].legs[0].distance.value);\n\n      const tripDistance = directionsResponse.routes[0].legs[0].distance.value\n      const stops = 2\n\n      const newLegLength = tripDistance/stops\n      console.log(newLegLength)\n      }\n\n      findLegsLength()\n\nEnd Micah's Code */\n/* Other BS Code */\nasync function getMarkers (route,distanceBetweenStops, markerOptions) {        \n  let markers=[],\n      geo=google.maps.geometry.spherical,\n      path=route.overview_path,\n      point=path[0],\n      distance=0,\n      leg,\n      overflow,\n      markerPosition;\n    \n    // For each point on the path\n    path.forEach(pointOnPath => {\n      // Set the distance of the leg to (previous point distances) + (distance from last point to current point)\n      leg = Math.round(geo.computeDistanceBetween(point, pointOnPath));\n      let d1 = distance + 0\n      distance += leg;        \n      overflow = distanceBetweenStops - (d1 % distanceBetweenStops);\n      \n      // Once the leg is >= to the desired distance between points, create the new marker and push it to markers\n      if(distance >= distanceBetweenStops && leg >= overflow) {\n          markerPosition = geo.computeOffset(point,overflow,geo.computeHeading(point,pointOnPath));\n          markerOptions.position = markerPosition;\n          markers.push(new google.maps.Marker(markerOptions));\n          distance -= distanceBetweenStops;\n      }\n      point = pointOnPath\n    });\n\n  markers.forEach(marker => console.log(marker.position.lat(), marker.position.lng()))\n  \n  return markers;}\n/* End Other BS Code */\n      \n      \n\n      \n   \n   \n /* async function coffeeStops({rangeValue}) { */\n           const coffeeDistance = intCoffee /(rangeValue); \n\n        /*   await calculatePath;\n          if (distance > 0) {\n            console.log(coffeeDistance)\n            return coffeeDistance;\n            console.log({distance}); */\n\n\n\n          \n    async function calculatePath(){\n       \n        if (originRef.current.value === '' || destinationRef.current.value === ''){\n            return\n        }\n        \n        // eslint-disable-next-line no-undef\n        const directionsService = new google.maps.DirectionsService()\n        const results = await directionsService.route({\n          origin: originRef.current.value,\n          destination: destinationRef.current.value,\n          // eslint-disable-next-line no-undef\n          travelMode: google.maps.TravelMode.DRIVING,\n        \n        });\n            \n        setDirectionsResponse(results)\n        setDistance(results.routes[0].legs[0].distance.text)\n        setDuration(results.routes[0].legs[0].duration.text)\n        \n        /* console.log(coffeeDistance) */\n        \n        \n\n    }\n\n\n\nreturn (\n  <div>\n    <div>\n      <Autocomplete>\n        <input type=\"text\" placeholder=\"Origin\" ref={originRef} />\n      </Autocomplete>\n    </div>\n    <div>\n      <Autocomplete>\n        <input type=\"text\" placeholder=\"Destination\" ref={destinationRef} />\n      </Autocomplete>\n    </div>\n    \n    <div>\n        <button type='submit' onClick={calculatePath}>Find your Buzzed Path</button>\n    </div>\n    <div>\n        <p>Distance: {distance}</p>\n        \n        <p>Duration: {duration}</p>\n        <p>Miles per Coffee: {coffeeDistance}</p>\n{/*         <p>Miles per Coffee: {intCoffee/rangeValue}</p>\n */}        \n    </div>\n    <div className=\"coffeemap\">\n      <GoogleMap\n        mapContainerStyle={mapContainerStyle}\n        zoom={8}\n        center={center}\n      ><Marker position={center}/>\n        {directionsResponse && (\n            <DirectionsRenderer directions = {directionsResponse}/>\n        )}</GoogleMap>\n    </div>\n  </div>\n);\n}\n"]},"metadata":{},"sourceType":"module"}